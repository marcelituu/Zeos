Logica del read
1. Añado la system call al syscall_table n=3
2. En io.c creo dos funciones y lo correspondiente al buffer_circular
   - write_circular_buffer -> Añade el caracter captado por el teclado dentro del buffer circular 
    - read_circular_buffer -> Lee el numero de caracteres que se le pasa por parametro del buffer circular
3. El sys_read se encarga de llamar a la funcion read_circular_buffer y de devolver el numero de caracteres leidos


Lógica screen support
1. Añado las systemcall a la syscall_table
2. En io.c para el gotoxy hago una funcion que modifica las variables globales de la posicion del cursor,
    y hago las comprobaciones pertinentes para que no se salga de la pantalla
3. Para el set_color modifico la variable global de color y en el printc hago que imprima con ese color
 también hago las comprobaciones para que los colores sean valores váldos.

 

Lógica shared memory
1. shmat
    sys_shmat se hace la funcionalidad que se pide en el enunciado
    Primero hago las comprobaciones necesarias para ver que los valores que se pasan por parámetro son válidos.
    Le asigno a la addr el frame correspondiente e incremento el número de procesos que están usando ese frame.
    
2. shmdt
    sys_shmdt se hace la funcionalidad que se pide en el enunciado
    Se hace -- a la posición correspondiente del vector de frames compartidos.
    En caso de que el proceso sea el último que está usando el frame compartido y ese frame estaba marcado
    para ser limpiado se limpia el frame.

3. shmrm
    Simplemente marca el frame para ser limpiado.

Para que funcione el shared memory hay que modificar el sys_fork de tal manera que tambien
se haga la asignación de páginas compartidas al hijo. 
En sys_exit se tiene que decrementar el número de procesos que están usando el frame compartido

Lógica del COW

1. Cuando en sys_fork se hace la asignación de páginas de datos ya no se hace la copia de la página
    sino que se le asigna la misma pagina que el padre pero se pone como Read Only, de esta 
    manera cunado el proceso hijo quiera modificar la página se producirá un page fault.

2. Definimos un nuevo page_fault (en interrupt.c), en caso de que la dirección que haya dado
page fault sea de una página de datos y la página sea de solo lectura se hace la copia de la página
y se le asigna al proceso hijo. En caso de que haya dado un page fault en otra dirección se trata como
un page fault normal.
 
Muy Importante: Para que funcione el COW hay que pasarle el eip por la pila en entry.S 

Archivos de interes
En user-utils.S estan todos los wrappers de las llamdas a sistema
En syscall_table.S esta la tabla de system calls
En interrupt.c estan los handlers de las interrupciones
En user.c estan las funciones de usuario, es el archivo para hacer pruebas sobretodo
En entry.S codigo assembler que se ejecuta al hacer una interrupcion


